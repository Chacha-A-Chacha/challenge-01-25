// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  
  @@map("admins")
}

model Course {
  id           String   @id @default(cuid())
  name         String
  headTeacher  Teacher  @relation("HeadTeacher", fields: [headTeacherId], references: [id])
  headTeacherId String  @unique
  endDate      DateTime?
  status       CourseStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  
  teachers     Teacher[] @relation("CourseTeachers")
  classes      Class[]
  
  @@map("courses")
}

model Teacher {
  id        String      @id @default(cuid())
  email     String      @unique
  password  String
  course    Course?     @relation("CourseTeachers", fields: [courseId], references: [id])
  courseId  String?
  role      TeacherRole @default(ADDITIONAL)
  createdAt DateTime    @default(now())
  
  headCourse Course? @relation("HeadTeacher")
  attendanceRecords Attendance[]
  approvedRequests  ReassignmentRequest[]
  
  @@map("teachers")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  capacity  Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  
  sessions  Session[]
  students  Student[]
  
  @@map("classes")
}

model Session {
  id        String    @id @default(cuid())
  class     Class     @relation(fields: [classId], references: [id])
  classId   String
  day       WeekDay
  startTime DateTime  // e.g., "09:00:00"
  endTime   DateTime  // e.g., "11:00:00" 
  capacity  Int
  createdAt DateTime  @default(now())
  
  // Students assigned to this specific session
  saturdayStudents    Student[] @relation("SaturdayStudents")
  sundayStudents      Student[] @relation("SundayStudents")
  attendances         Attendance[]
  fromRequests       ReassignmentRequest[] @relation("FromSession")
  toRequests         ReassignmentRequest[] @relation("ToSession")
  
  @@map("sessions")
}

model Student {
  id            String   @id @default(cuid())
  uuid          String   @unique @default(cuid())
  studentNumber String
  firstName     String
  lastName      String?
  email         String   @unique
  phoneNumber   String?
  
  // Class membership (for course organization and reassignment limits)
  class         Class    @relation(fields: [classId], references: [id])
  classId       String
  
  // Specific session assignments within the class
  saturdaySession Session? @relation("SaturdayStudents", fields: [saturdaySessionId], references: [id])
  saturdaySessionId String?
  sundaySession   Session? @relation("SundayStudents", fields: [sundaySessionId], references: [id])
  sundaySessionId String?
  
  createdAt     DateTime @default(now())
  
  attendances           Attendance[]
  reassignmentRequests  ReassignmentRequest[]
  
  @@unique([studentNumber, classId])
  @@map("students")
}

model Attendance {
  id        String           @id @default(cuid())
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  session   Session          @relation(fields: [sessionId], references: [id])
  sessionId String
  date      DateTime
  status    AttendanceStatus
  scanTime  DateTime?
  markedBy  Teacher?         @relation(fields: [teacherId], references: [id])
  teacherId String?
  
  @@unique([studentId, sessionId, date])
  @@map("attendances")
}

model ReassignmentRequest {
  id            String        @id @default(cuid())
  student       Student       @relation(fields: [studentId], references: [id])
  studentId     String
  fromSession   Session       @relation("FromSession", fields: [fromSessionId], references: [id])
  fromSessionId String
  toSession     Session       @relation("ToSession", fields: [toSessionId], references: [id])
  toSessionId   String
  status        RequestStatus @default(PENDING)
  requestedAt   DateTime      @default(now())
  approvedBy    Teacher?      @relation(fields: [teacherId], references: [id])
  teacherId     String?
  
  @@map("reassignment_requests")
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum TeacherRole {
  HEAD
  ADDITIONAL
}

enum WeekDay {
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  WRONG_SESSION
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}